"""empty message

Revision ID: 35581ac21d31
Revises: d7c62ac18295
Create Date: 2021-05-25 22:17:28.158196

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '35581ac21d31'
down_revision = 'd7c62ac18295'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('miscellaneous',
    sa.Column('max_deliveries_per_time_slot', sa.Integer(), nullable=False),)
    # sa.PrimaryKeyConstraint('max_deliveries_per_time_slot')
    # )
    
    op.drop_table('max_deliveries_per_slot')
    op.add_column('card_payment', sa.Column('payment_time', sa.DateTime(), nullable=True))
    op.drop_column('card_payment', 'payment_date')
    op.add_column('cash_payment', sa.Column('payment_time', sa.DateTime(), nullable=True))
    op.drop_column('cash_payment', 'payment_date')
    op.add_column('grocery', sa.Column('brand', sa.String(length=100), nullable=True))
    op.add_column('grocery', sa.Column('category', sa.String(length=50), nullable=True))
    op.add_column('grocery', sa.Column('package_type', sa.String(length=50), nullable=True))
    op.create_unique_constraint('_grocery_name_size_uc', 'grocery', ['name', 'size'])
    op.drop_constraint('grocery_name_key', 'grocery', type_='unique')
    op.add_column('order_groceries', sa.Column('sku', sa.String(length=50), nullable=True))
    op.add_column('order_groceries', sa.Column('total_tax', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('order_groceries', sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=True))
    op.create_unique_constraint('order_groceries_sku_key', 'order_groceries', ['sku'])
    op.add_column('orders', sa.Column('billing_first_name', sa.LargeBinary(), nullable=True))
    op.add_column('orders', sa.Column('billing_last_name', sa.LargeBinary(), nullable=True))
    op.add_column('orders', sa.Column('billing_parish', sa.Integer(), nullable=True))
    op.add_column('orders', sa.Column('billing_street', sa.LargeBinary(), nullable=True))
    op.add_column('orders', sa.Column('billing_town', sa.LargeBinary(), nullable=True))
    op.add_column('orders', sa.Column('delivery_date', sa.Date(), nullable=True))
    op.add_column('orders', sa.Column('delivery_first_name', sa.LargeBinary(), nullable=True))
    op.add_column('orders', sa.Column('delivery_last_name', sa.LargeBinary(), nullable=True))
    op.add_column('orders', sa.Column('delivery_parish', sa.Integer(), nullable=True))
    op.add_column('orders', sa.Column('delivery_street', sa.LargeBinary(), nullable=True))
    op.add_column('orders', sa.Column('delivery_timeslot', sa.Integer(), nullable=True))
    op.add_column('orders', sa.Column('delivery_town', sa.LargeBinary(), nullable=True))
    op.alter_column('orders', 'payment_type',
               existing_type=postgresql.BYTEA(),
               nullable=False)
    op.drop_constraint('orders_deliverytimeslot_fkey', 'orders', type_='foreignkey')
    op.drop_constraint('orders_deliveryparish_fkey', 'orders', type_='foreignkey')
    op.create_foreign_key('orders_delivery_timeslot_fkey', 'orders', 'delivery_time_slot', ['delivery_timeslot'], ['id'])
    op.create_foreign_key('orders_billing_parish_fkey', 'orders', 'delivery_parish', ['billing_parish'], ['id'])
    op.create_foreign_key('orders_delivery_parish_fkey', 'orders', 'delivery_parish', ['delivery_parish'], ['id'])
    op.drop_column('orders', 'deliverystreet')
    op.drop_column('orders', 'deliveryparish')
    op.drop_column('orders', 'deliverytown')
    op.drop_column('orders', 'deliverydate')
    op.drop_column('orders', 'deliverytimeslot')
    op.drop_constraint('taxes_on_goods_tax_fkey', 'taxes_on_goods', type_='foreignkey')
    op.create_foreign_key('taxes_on_goods_tax_fkey', 'taxes_on_goods', 'taxes', ['tax'], ['tax'], ondelete='CASCADE')
    op.create_foreign_key('taxes_on_goods_grocery_id_fkey', 'taxes_on_goods', 'taxes', ['tax'], ['tax'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('taxes_on_goods_grocery_id_fkey', 'taxes_on_goods', type_='foreignkey')
    op.drop_constraint('taxes_on_goods_tax_fkey', 'taxes_on_goods', type_='foreignkey')
    op.create_foreign_key('taxes_on_goods_tax_fkey', 'taxes_on_goods', 'taxes', ['tax'], ['tax'], ondelete='SET NULL')
    op.add_column('orders', sa.Column('deliverytimeslot', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('orders', sa.Column('deliverydate', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('orders', sa.Column('deliverytown', postgresql.BYTEA(), autoincrement=False, nullable=True))
    op.add_column('orders', sa.Column('deliveryparish', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('orders', sa.Column('deliverystreet', postgresql.BYTEA(), autoincrement=False, nullable=True))
    op.drop_constraint('orders_delivery_parish_fkey', 'orders', type_='foreignkey')
    op.drop_constraint('orders_billing_parish_fkey', 'orders', type_='foreignkey')
    op.drop_constraint('orders_delivery_timeslot_fkey', 'orders', type_='foreignkey')
    op.create_foreign_key('orders_deliveryparish_fkey', 'orders', 'delivery_parish', ['deliveryparish'], ['id'])
    op.create_foreign_key('orders_deliverytimeslot_fkey', 'orders', 'delivery_time_slot', ['deliverytimeslot'], ['id'])
    op.alter_column('orders', 'payment_type',
               existing_type=postgresql.BYTEA(),
               nullable=True)
    op.drop_column('orders', 'delivery_town')
    op.drop_column('orders', 'delivery_timeslot')
    op.drop_column('orders', 'delivery_street')
    op.drop_column('orders', 'delivery_parish')
    op.drop_column('orders', 'delivery_last_name')
    op.drop_column('orders', 'delivery_first_name')
    op.drop_column('orders', 'delivery_date')
    op.drop_column('orders', 'billing_town')
    op.drop_column('orders', 'billing_street')
    op.drop_column('orders', 'billing_parish')
    op.drop_column('orders', 'billing_last_name')
    op.drop_column('orders', 'billing_first_name')
    op.drop_constraint('order_groceries_sku_key', 'order_groceries', type_='unique')
    op.drop_column('order_groceries', 'unit_price')
    op.drop_column('order_groceries', 'total_tax')
    op.drop_column('order_groceries', 'sku')
    op.drop_constraint('grocery_category_key', 'grocery', type_='unique')
    op.create_unique_constraint('grocery_name_key', 'grocery', ['name'])
    op.drop_constraint('_grocery_name_size_uc', 'grocery', type_='unique')
    op.drop_column('grocery', 'package_type')
    op.drop_column('grocery', 'category')
    op.drop_column('grocery', 'brand')
    op.add_column('cash_payment', sa.Column('payment_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('cash_payment', 'payment_time')
    op.add_column('card_payment', sa.Column('payment_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_column('card_payment', 'payment_time')
    op.create_table('max_deliveries_per_slot',
    sa.Column('max_deliveries_per_time_slot', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('max_deliveries_per_time_slot', name='max_deliveries_per_slot_pkey')
    )
    op.drop_table('miscellaneous')
    # ### end Alembic commands ###
